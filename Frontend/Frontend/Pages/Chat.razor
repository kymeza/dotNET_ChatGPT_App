@page "/chat"
@using Markdig
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

@inject IJSRuntime jsRuntime

<script type="text/javascript">
        scrollIntoView = (el) => el.scrollIntoView();
</script>

<PageTitle>Chat</PageTitle>

<div class="h-100" style="position: relative;">
    <div class="w-100 h-100" style="position: relative;">
        <div class="h-100 d-flex flex-column" style="max-height: 100%">

            <div class="row mt-4">
                <div class="col">
                    <input type="text" class="form-control" @bind="modelInput" placeholder="Model Name" />
                </div>
                <div class="col">
                    <button type="button" class="btn btn-primary" @onclick="Connect" disabled="@(isConnected)">Connect</button>
                </div>
            </div>

            <div class="my-4" style="height:100%; max-height: 100%; overflow-y: auto;">

                @foreach (var message in messages)
                {
                <div class="card text-black mb-3 @(message.Sender is ChatGptRoles.Assistant ? "bg-secondary" : string.Empty)"
                     style="width: 70%; @(message.Sender is ChatGptRoles.User ? "margin-left:20%" : "margin-left:10%")">
                    <div class="card-body">
                        <div class="card-text" style="overflow-x: auto">
                            @if (string.IsNullOrWhiteSpace(message.Content))
                            {
                            <em>I'm thinking...</em>
                            }
                            else
                            {
                            @((MarkupString)Markdown.ToHtml(message.Content, markdownPipeline))
                            }
                        </div>
                    </div>
                </div>
                }

                <div @ref="anchor"></div>

            </div>

            <div class="input-group">
                <input type="text" class="form-control" @bind="messageInput" placeholder="Ask me anything" @bind:event="oninput" @onkeypress="OnTypingMessageAsync" />
                <button type="button" class="btn btn-primary" @onclick="AskAsync" disabled="@(!CanSendMessage())">
                    Send
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    
    private ElementReference anchor;
    
    private static readonly MarkdownPipeline markdownPipeline = new MarkdownPipelineBuilder().UseAdvancedExtensions().Build();
    
    private HubConnection? hubConnection;
    
    private class ChatEntry
    {
        public string Sender { get; set; } = string.Empty;
        public string Content { get; set; } = string.Empty;
    }
    
    private bool CanSendMessage()
        => !string.IsNullOrWhiteSpace(messageInput) && !isAsking;

    private async Task OnTypingMessageAsync(KeyboardEventArgs keyboardEventArgs)
    {
        if (keyboardEventArgs.Code is "Enter")
        {
            await AskAsync();
        }
    }
    
    private List<ChatEntry> messages = new();
    
    private string? modelInput;
    private string? messageInput;
    private bool isAsking;
    private bool isConnected;

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(new Uri("https://localhost:7021/chatStreamingHub"))
            .Build();

        await hubConnection.StartAsync();
        if (hubConnection.State is HubConnectionState.Connected)
        {
            isConnected = true;
        }
        await hubConnection.SendAsync("CreateClient", modelInput);
    }

    private async Task AskAsync()
    {
        if (hubConnection != null)
        {

            if (!isAsking)
            {
                isAsking = true;

                messages.Add(new ChatEntry { Sender = ChatGptRoles.User, Content = messageInput! });
                var responseMessage = new ChatEntry { Sender = ChatGptRoles.Assistant, Content = string.Empty };

                var responseStream = hubConnection.StreamAsync<string>("SendCompletion", messageInput);
                messageInput = string.Empty;
                await Task.Delay(500);
                messages.Add(responseMessage);
                StateHasChanged();
                await jsRuntime.InvokeVoidAsync(@"scrollIntoView", anchor);

                await foreach (var responseChunk in responseStream)
                {
                    responseMessage.Content += responseChunk;

                    await Task.Delay(80);
                    StateHasChanged();

                    await jsRuntime.InvokeVoidAsync(@"scrollIntoView", anchor);
                }

                isAsking = false;
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}